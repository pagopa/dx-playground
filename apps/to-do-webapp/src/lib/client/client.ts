/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import { withoutUndefinedValues } from "@pagopa/ts-commons/lib/types";
import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

import {
  InfoT,
  infoDefaultDecoder,
  CreateTaskT,
  createTaskDefaultDecoder,
  ListTasksT,
  listTasksDefaultDecoder,
  GetTaskByIdT,
  getTaskByIdDefaultDecoder,
  DeleteTaskT,
  deleteTaskDefaultDecoder
} from "./requestTypes";

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = TypeofApiCall<InfoT> &
  TypeofApiCall<CreateTaskT> &
  TypeofApiCall<ListTasksT> &
  TypeofApiCall<GetTaskByIdT> &
  TypeofApiCall<DeleteTaskT>;

export type ParamKeys = keyof (TypeofApiParams<InfoT> &
  TypeofApiParams<CreateTaskT> &
  TypeofApiParams<ListTasksT> &
  TypeofApiParams<GetTaskByIdT> &
  TypeofApiParams<DeleteTaskT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<
  InfoT | CreateTaskT | ListTasksT | GetTaskByIdT | DeleteTaskT,
  K
>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = K extends __UNDEFINED_KEY
  ? {
      readonly info: TypeofApiCall<InfoT>;

      readonly createTask: TypeofApiCall<CreateTaskT>;

      readonly listTasks: TypeofApiCall<ListTasksT>;

      readonly getTaskById: TypeofApiCall<GetTaskByIdT>;

      readonly deleteTask: TypeofApiCall<DeleteTaskT>;
    }
  : {
      readonly info: TypeofApiCall<
        ReplaceRequestParams<InfoT, Omit<RequestParams<InfoT>, K>>
      >;

      readonly createTask: TypeofApiCall<
        ReplaceRequestParams<CreateTaskT, Omit<RequestParams<CreateTaskT>, K>>
      >;

      readonly listTasks: TypeofApiCall<
        ReplaceRequestParams<ListTasksT, Omit<RequestParams<ListTasksT>, K>>
      >;

      readonly getTaskById: TypeofApiCall<
        ReplaceRequestParams<GetTaskByIdT, Omit<RequestParams<GetTaskByIdT>, K>>
      >;

      readonly deleteTask: TypeofApiCall<
        ReplaceRequestParams<DeleteTaskT, Omit<RequestParams<DeleteTaskT>, K>>
      >;
    };

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = ""
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const infoT: ReplaceRequestParams<InfoT, RequestParams<InfoT>> = {
    method: "get",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "Ocp-Apim-Subscription-Key": ApiKeyAuth
    }),
    response_decoder: infoDefaultDecoder(),
    url: ({}) => `${basePath}/info`,

    query: () => withoutUndefinedValues({})
  };
  const info: TypeofApiCall<InfoT> = createFetchRequestForApi(infoT, options);

  const createTaskT: ReplaceRequestParams<
    CreateTaskT,
    RequestParams<CreateTaskT>
  > = {
    method: "post",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "Ocp-Apim-Subscription-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: createTaskDefaultDecoder(),
    url: ({}) => `${basePath}/tasks`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const createTask: TypeofApiCall<CreateTaskT> = createFetchRequestForApi(
    createTaskT,
    options
  );

  const listTasksT: ReplaceRequestParams<
    ListTasksT,
    RequestParams<ListTasksT>
  > = {
    method: "get",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "Ocp-Apim-Subscription-Key": ApiKeyAuth
    }),
    response_decoder: listTasksDefaultDecoder(),
    url: ({}) => `${basePath}/tasks`,

    query: () => withoutUndefinedValues({})
  };
  const listTasks: TypeofApiCall<ListTasksT> = createFetchRequestForApi(
    listTasksT,
    options
  );

  const getTaskByIdT: ReplaceRequestParams<
    GetTaskByIdT,
    RequestParams<GetTaskByIdT>
  > = {
    method: "get",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "Ocp-Apim-Subscription-Key": ApiKeyAuth
    }),
    response_decoder: getTaskByIdDefaultDecoder(),
    url: ({ ["taskId"]: taskId }) => `${basePath}/tasks/${taskId}`,

    query: () => withoutUndefinedValues({})
  };
  const getTaskById: TypeofApiCall<GetTaskByIdT> = createFetchRequestForApi(
    getTaskByIdT,
    options
  );

  const deleteTaskT: ReplaceRequestParams<
    DeleteTaskT,
    RequestParams<DeleteTaskT>
  > = {
    method: "delete",

    headers: ({ ["ApiKeyAuth"]: ApiKeyAuth }) => ({
      "Ocp-Apim-Subscription-Key": ApiKeyAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteTaskDefaultDecoder(),
    url: ({ ["taskId"]: taskId }) => `${basePath}/tasks/${taskId}`,

    query: () => withoutUndefinedValues({})
  };
  const deleteTask: TypeofApiCall<DeleteTaskT> = createFetchRequestForApi(
    deleteTaskT,
    options
  );

  return {
    info: (withDefaults || identity)(info),
    createTask: (withDefaults || identity)(createTask),
    listTasks: (withDefaults || identity)(listTasks),
    getTaskById: (withDefaults || identity)(getTaskById),
    deleteTask: (withDefaults || identity)(deleteTask)
  };
}
