name: Convert dot to Mermaid with Azure AI

on:
  workflow_dispatch:
    inputs:
      api_key:
        description: 'Azure OpenAI API Key'
        required: true
  # push:
  #   branches:
  #     - feat-poc-ai-graph-generation

jobs:
  dot-to-mermaid:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4

      - name: Generate Prompt File
        id: generate_prompt
        run: |
          # Legge il contenuto del file .dot in una variabile d'ambiente
          # per renderlo disponibile al prossimo step.
          # Usare 'EOF' previene problemi con caratteri speciali.
          DOT_CONTENT=$(cat ./infra/resources/dev/graph.dot)
          echo "dot_content<<EOF" >> $GITHUB_ENV
          echo "$DOT_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Crea il file di prompt separatamente.
          cat > prompt.txt <<'EOF'
          You are an expert in converting Terraform-generated Graphviz DOT diagrams into clear, human-friendly Mermaid diagrams.

          Requirements:
          0. **Wrap the entire output** inside a Markdown code fence with `mermaid`, exactly like this:
          \`\`\`mermaid
          …the entire diagram…
          \`\`\`
          1. **Output only valid Mermaid syntax** (no prose).
          2. **Orientation**: Use `graph LR` (left-to-right).
          3. **Subgraphs**: Group nodes into logical clusters with meaningful titles. Each subgraph block must be in the form:
            subgraph Group Title
              NodeA[“Label A”]
              NodeB[“Label B”]
            end
          4. **Naming**:  
            - Strip Terraform resource prefixes (`azurerm_`, `data.`) and use title-case labels (e.g. `Key Vault Certificate`, `API Management Service`).  
            - For DNS entries, include both zone and record type (`A Record - apim.azure-api.net`) if present.
          5. **Connections**:  
            - Draw arrows only once per relationship.  
            - Label edges only if it adds clarity (otherwise omit labels).
          6. **Clean Up**:  
            - Remove any standalone “management lock” or “diagnostic” nodes that don’t have outgoing or incoming edges—unless they’re essential.  
            - Collapse any trivial one-node subgraphs into their parent group.

          Here is the original DOT code:
          \`\`\`dot
          ${{ env.dot_content }}
          \`\`\`
          EOF

          echo "--- Prompt File Content ---"
          cat prompt.txt
          echo "--------------------------"

      - name: Prepare JSON Payload
        id: prepare_json
        run: |
          # Legge il contenuto del prompt da prompt.txt
          PROMPT_CONTENT=$(cat prompt.txt)

          # Usa jq per creare un file payload.json valido.
          # -n: input nullo
          # --arg: passa una stringa (il nostro prompt) a jq in modo sicuro
          # Il modello (o4-mini) è già specificato nell'URL, quindi non è necessario nel corpo.
          # Il parametro corretto per i token è 'max_tokens'.
          jq -n \
            --arg content "$PROMPT_CONTENT" \
            '{
              "messages": [
                {
                  "role": "user",
                  "content": $content
                }
              ],
              "max_completion_tokens": 100000,
              "model": "o4-mini"
            }' > payload.json

          echo "--- JSON Payload Content ---"
          cat payload.json
          echo "----------------------------"

      - name: Run AI call API
        id: inference
        env:
          AZURE_API_KEY: ${{ inputs.api_key }}
        run: |
          # Ora il comando curl è più pulito e sicuro.
          # -d @payload.json legge i dati dal file che abbiamo appena creato.
          # Ho formattato il comando su più righe per leggibilità.
          curl -s -X POST "https://dx-d-sdc-test-aif-01.cognitiveservices.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2024-02-01" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $AZURE_API_KEY" \
            -d @payload.json \
            -o response.json

      - name: Extract and Save Mermaid Content
        run: |
          echo "--- Full API Response ---"
          cat response.json
          echo "-------------------------"
          

          MERMAID_CONTENT=$(jq -r '.choices[0].message.content' response.json | sed 's/^`*mermaid//;s/`*$//')
          
          echo "graph TD" > mermaid-diagram.md
          echo "$MERMAID_CONTENT" >> mermaid-diagram.md

          echo "--- Final Mermaid Diagram ---"
          cat mermaid-diagram.md
          echo "-----------------------------"

      - name: Upload Mermaid Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "mermaid-diagram"
          # Carica il file .md finale invece della risposta JSON grezza.
          path: mermaid-diagram.md
          if-no-files-found: error
          retention-days: 7