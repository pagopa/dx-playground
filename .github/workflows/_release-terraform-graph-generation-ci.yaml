name: Generate Mermaid Diagrams for Terraform modules - CI - TEST

# Trigger the workflow on pull requests that modify .dot files or manually via workflow_dispatch
# For workflow_dispatch, an optional input 'dot_path' can be provided to specify a single .dot file to convert
# If 'dot_path' is not provided, all changed .dot files in the PR will be processed

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - '**/graph.dot'
  workflow_dispatch:
    inputs:
      dot_path:
        description: "Path to the .dot file to convert"
        default: ""
        required: false
  # push:
  #   branches:
  #     - feat-poc-ai-graph-generation

jobs:
  find-changed-dots:
    name: Find Changed .dot Files
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Find changed .dot files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        with:
          files: '**/graph.dot'
          base_sha: 'main' # REMOVE (normally compare PR branch latest two commits)
          sha: feat-poc-ai-graph-generation # REMOVE (this is the branch where the PR is opened, now specified ti permit workflow_dispatch)
          # base_sha: ${{ github.event_name == 'workflow_dispatch' && 'main' || '' }}
          # sha: ${{ github.event_name == 'workflow_dispatch' && github.ref_name || '' }}
          matrix: true
      
      - name: List changed files
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
      #     echo "${{ steps.changed-files.outputs.changed_files }}" > changed-files.json

      # - name: Upload Artifact
      #   uses: pagopa/dx/.github/actions/upload-artifact@main
      #   with:
      #     bundle_name: changed-files-${{ github.event.pull_request.head.sha }}
      #     file_path: changed-files.json

  dot-to-mermaid:
    needs: find-changed-dots
    if: ${{ needs.find-changed-dots.outputs.changed_files != '[]' && needs.find-changed-dots.outputs.changed_files != '' }}
    name: Convert DOT to Mermaid
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    strategy:
      matrix:
        dot_file: ${{ github.event.inputs.dot_path == '' && fromJson(needs.find-changed-dots.outputs.changed_files) || fromJson(format('["{0}"]', github.event.inputs.dot_path)) }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.head_ref }}

      - name: Generate Prompt for ${{ matrix.dot_file }}
        id: generate_prompt
        run: |
          PROMPT_FILE="prompt-$(echo "${{ matrix.dot_file }}" | tr '/' '-').txt"
          
          cat > "$PROMPT_FILE" <<EOF
          You are an expert in converting Terraform-generated Graphviz DOT diagrams into clear, human-friendly Mermaid diagrams.

          Requirements:
          0. **Wrap the entire output** inside a Markdown code fence with `mermaid`, exactly like this:
          \`\`\`mermaid
          …the entire diagram…
          \`\`\`
          1. **Output only valid Mermaid syntax** (no prose).
          2. **Orientation**: Use \`graph LR\` (left-to-right).
          3. **Subgraphs**: Group nodes into logical clusters with meaningful titles. Each subgraph block must be in the form:
            subgraph Group Title
              NodeA[“Label A”]
              NodeB[“Label B”]
            end
          4. **Naming**:  
            - Strip Terraform resource prefixes (\`azurerm_\`, \`data.\`) and use title-case labels (e.g. \`Key Vault Certificate\`, \`API Management Service\`).  
            - For DNS entries, include both zone and record type (\`A Record - apim.azure-api.net\`) if present.
          5. **Connections**:  
            - Draw arrows only once per relationship.  
            - Label edges only if it adds clarity (otherwise omit labels).
          6. **Clean Up**:  
            - Remove any standalone “management lock” or “diagnostic” nodes that don’t have outgoing or incoming edges—unless they’re essential.  
            - Collapse any trivial one-node subgraphs into their parent group.

          Here is the original DOT code:
          \`\`\`dot
          $(cat ./${{ matrix.dot_file }})
          \`\`\`
          EOF

          echo "Prompt file created at $PROMPT_FILE"
          echo "prompt_path=$PROMPT_FILE" >> $GITHUB_OUTPUT

      - name: Prepare JSON Payload
        id: prepare_json
        run: |
          JSON_FILE="payload-$(echo "${{ matrix.dot_file }}" | tr '/' '-').json"
          jq -n \
            --arg content "$(cat ${{ steps.generate_prompt.outputs.prompt_path }})" \
            '{
              "messages": [
                {
                  "role": "user",
                  "content": $content
                }
              ],
              "max_completion_tokens": 100000,
              "model": "o4-mini"
            }' > "$JSON_FILE"

          echo "JSON payload created at $JSON_FILE"
          echo "json_payload_path=$JSON_FILE" >> $GITHUB_OUTPUT

      - name: Run AI call API for ${{ matrix.dot_file }}
        id: ai_call
        env:
          AZURE_API_KEY: ${{ secrets.AZURE_AI_API_KEY }}
        run: |
          RESPONSE_FILE="response-$(echo "${{ matrix.dot_file }}" | tr '/' '-').json"
          DOT_DIR=$(dirname "${{ matrix.dot_file }}")
          ENCODED_NAME=$(echo "$DOT_DIR" | tr '/' '-')
          MD_FILE_PATH="${ENCODED_NAME}.md"

          # curl -s -X POST "https://dx-d-sdc-test-aif-01.cognitiveservices.azure.com/openai/deployments/o4-mini/chat/completions?api-version=2025-01-01-preview" \
          #   -H "Content-Type: application/json" \
          #   -H "Authorization: Bearer $AZURE_API_KEY" \
          #   -d @${{ steps.prepare_json.outputs.json_payload_path }} \
          #   -o "$RESPONSE_FILE"

          # jq -r '.choices[0].message.content' "$RESPONSE_FILE" > "$MD_FILE_PATH"
          echo $DOT_DIR
          echo $ENCODED_NAME
          cat $DOT_DIR/graph.md > "$MD_FILE_PATH"

          echo "Mermaid file created at: $MD_FILE_PATH"
          mv "$MD_FILE_PATH" "artifacts/$MD_FILE_PATH"
          # echo "md_file_path=$MD_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Post Diagranm as PR Comment
        id: comment
        if: always() && github.event_name == 'pull_request'
        uses: pagopa/dx/actions/pr-comment@main
        env:
          COMMENT_BODY_FILE: ${{ steps.ai_call.outputs.md_file_path }}
        with:
          comment-body-file: ${{ env.COMMENT_BODY_FILE }}
          search-pattern: "Diagram for ${{ matrix.dot_file }}"

  upload-artifacts:
    runs-on: ubuntu-latest
    needs: dot-to-mermaid
    name: Upload All Diagrams
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Upload Artifact
        uses: pagopa/dx/.github/actions/upload-artifact@main
        with:
          bundle_name: mermaid-diagrams-${{ github.event.pull_request.head.sha }}
          file_path: ./artifacts/