name: Release Candidate Reusable Workflow

on:
  workflow_call:
    inputs:
      pr_number:
        description: "The pull request number."
        required: true
        type: number
      distribution_type:
        description: "The type of distribution (e.g., beta, alpha)."
        required: false
        type: string
        default: "beta"
    secrets:
      gh_bot_pat:
        description: "GitHub Bot PAT for repository access."
        required: true
      npm_token:
        description: "npm token for package publishing."
        required: true

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write

jobs:
  release-candidate:
    name: Release Candidate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: pagopa/dx/.github/actions/node-setup@main

      - name: Install dependencies
        run: yarn install --immutable

      - name: Get PR branch name
        id: get_pr_branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          PR_NUMBER: ${{ inputs.pr_number }}
        with:
          script: |
            const pull_number = process.env.PR_NUMBER;

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number,
            });
            return pr.head.ref;
          result-encoding: string

      - name: Configure Git user
        run: |
          git config --global user.email "dx-pagopa-github-bot@pagopa.it"
          git config --global user.name "dx-pagopa-bot"

      - name: Create a pre-release
        id: generate_pre_release
        env:
          BRANCH_NAME: ${{ steps.get_pr_branch.outputs.result }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          DISTRIBUTION_TYPE: ${{ inputs.distribution_type }}
        run: |
          set -e

          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

          # Use the distribution type as argument for pre enter (replace 'beta' with $DISTRIBUTION_TYPE)
          if [ ! -f ".changeset/pre.json" ] || [ "$(jq -r ".mode" .changeset/pre.json)" = "exit" ]; then
            # Rebase first. Fetch any changes from the remote branch
            git pull --rebase origin "$BRANCH_NAME"

            echo "Entering pre-release mode with distribution: $DISTRIBUTION_TYPE"
            yarn dlx @changesets/cli pre enter "$DISTRIBUTION_TYPE"

            # Generate status file
            echo "Generating changeset status..."
            yarn dlx @changesets/cli status --output=changeset-status.json
            cat changeset-status.json

            # Version and commit
            echo "Running changeset version..."
            yarn dlx @changesets/cli version
            git add .
            git diff --cached --quiet || git commit -m "Enter pre-release mode and version packages"

            # Publish
            echo "Publishing pre-release ($DISTRIBUTION_TYPE) packages..."
            yarn dlx @changesets/cli publish

            # Exit pre-release
            echo "Exiting pre-release mode"
            yarn dlx @changesets/cli pre exit
            git add .
            git diff --cached --quiet || git commit -m "Exit prerelease mode"

            # Push everything
            echo "Wrapping up and pushing to $BRANCH_NAME..."
            git push origin HEAD:"$BRANCH_NAME" --follow-tags
          else
            echo "::warning::Already in pre-release mode"
            exit 1
          fi

      - name: Generate PR comment content
        id: generate_comment
        env:
          DISTRIBUTION_TYPE: ${{ inputs.distribution_type }}
        run: |
          # Get published packages from changeset-status.json
          RELEASED_PACKAGES=$(jq -r '.releases[] | "- \(.name)@\(.newVersion)"' changeset-status.json)
          echo "PUBLISHED_PACKAGES<<EOF" >> $GITHUB_OUTPUT
          echo "New artifacts version ($DISTRIBUTION_TYPE distribution):" >> $GITHUB_OUTPUT
          echo "$RELEASED_PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          PUBLISHED_ARTIFACTS: ${{ steps.generate_comment.outputs.PUBLISHED_PACKAGES }}
          DISTRIBUTION_TYPE: ${{ inputs.distribution_type }}
        with:
          github-token: ${{ secrets.gh_bot_pat }}
          script: |
            const issueNumber = inputs.pr_number;
            const distribution = process.env.DISTRIBUTION_TYPE;
            const publishedPackages = process.env.PUBLISHED_ARTIFACTS;

            const body = `
            ðŸš€ Release Candidate Command executed.

            Distribution type: **${distribution}**

            ${publishedPackages}
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body,
            });
