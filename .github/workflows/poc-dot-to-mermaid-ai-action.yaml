name: Convert dot to Mermaid with Inference

# Ref. https://github.com/actions/ai-inference
# Ref. https://docs.github.com/en/github-models/use-github-models/integrating-ai-models-into-your-development-workflow

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - feat-poc-ai-graph-generation

jobs:
  dot-to-mermaid:
    runs-on: ubuntu-latest
    permissions:
      models: read
      contents: read
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4

      - name: Generate Prompt
        run: |
          cat > prompt.txt <<EOF
          You are an expert in converting Terraform-generated Graphviz DOT diagrams into clear, human-friendly Mermaid diagrams. Follow these rules exactly:

          1. **Global Layout**  
            - Always start with `graph RL`.

          2. **Code Only**  
            - Output **only** valid Mermaid code (no explanations or extra text).

          3. **Subgraph Blocks**  
            - For each logical group, emit:
                subgraph Group Title
                direction RL
                NodeID1[“Label 1”]
                NodeID2[“Label 2”]
                …
                end
          - Leave a blank line before and after each `subgraph` block.

          4. **Safe Node IDs**  
          - **Do not** use raw quoted strings as node IDs.  
          - Create a simple alphanumeric ID in CamelCase or snake_case (e.g. `KeyVault`, `APIMService`, `DNSZone_apim`) and then assign the human-readable label in `["…"]`.

          5. **Automatic Grouping**  
          - Detect clusters by shared prefixes or patterns.  
          - Title each subgraph in Title Case (e.g. “Key Vault”, “API Management”, “Networking”, etc.).

          6. **Renaming Labels**  
          - Strip technical prefixes (`azurerm_`, `data.`) and convert to Title Case.  
          - For DNS entries, include record type and zone (e.g. `A Record – apim.azure-api.net`).

          7. **Edges**  
          - After all subgraphs, list each connection once, with two spaces indent:
            ```
            NodeID1 --> NodeID2
            ```
          - Do not label edges unless strictly necessary for clarity.

          8. **Cleanup**  
          - Exclude isolated nodes (no edges).  
          - Merge any single-node subgraph into its parent group if it exists.

          Finally, append the DOT input verbatim:
          \`\`\`dot
          $(cat ./infra/resources/dev/graph.dot)
          \`\`\`
          EOF

          cat prompt.txt

      - name: Verify Models permission via a ping
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS=$(
            curl -o /dev/null -s -w "%{http_code}" \
              -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{"model":"openai/gpt-4o","messages":[{"role":"user","content":"Ping"}]}' \
              https://models.github.ai/inference/chat/completions
          )
          echo "Inference ping returned HTTP $STATUS"
          if [ "$STATUS" -ne 200 ]; then
            echo "🚨 models:read permission is missing or AI is not enabled"
            exit 1
          fi

      - name: Run AI Inference with Prompt File
        id: inference
        uses: actions/ai-inference@v1.1.0
        with:
          prompt-file: './prompt.txt'
          max-tokens: 4096
          model: openai/gpt-4o
          token: ${{ secrets.GITHUB_TOKEN }}


      - name: Use Response File
        run: |
          echo "Response saved to: ${{ steps.inference.outputs.response-file }}"
          cat "${{ steps.inference.outputs.response-file }}"

      - name: Upload Artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: "bundle-mermaid"
          path: ${{ steps.inference.outputs.response-file }}
          if-no-files-found: error
          retention-days: 7