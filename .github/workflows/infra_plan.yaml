on:
  workflow_call:
    inputs:
      environment:
        description: Environment where the resources will be deployed.
        type: string
        required: true
      base_path:
        description: The base path on which the script will look for Terraform projects
        type: string
        required: true
      env_vars:
        description: List of environment variables to set up, given in env=value format.
        type: string
        required: false
      use_private_agent:
        description: Use a private agent to run the Terraform plan.
        type: boolean
        required: false
        default: false
      override_github_environment:
        description: Set a value if GitHub Environment name is different than the TF environment folder
        type: string
        required: false
        default: ''
      use_labels:
        description: Use labels to start the right environment's GitHub runner. If use_labels is true, also use_private_agent must be set to true
        type: boolean
        required: false
        default: false
      override_labels:
        description: Needed for special cases where the environment alone is not sufficient as a distinguishing label
        type: string
        required: false
        default: ''

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true

jobs:
  tf_plan:
    name: 'Terraform Plan'
    # Use inputs.override_labels if set; otherwise, fall back to inputs.environment. 
    # When inputs.use_labels and inputs.use_private_agent are true, apply the selected labels. 
    # Default to 'self-hosted' if inputs.use_private_agent is true, or 'ubuntu-latest' otherwise.
    runs-on: ${{ inputs.use_labels && inputs.use_private_agent && (inputs.override_labels != '' && inputs.override_labels || inputs.environment) || inputs.use_private_agent && 'self-hosted' || 'ubuntu-latest' }}
    environment: ${{ inputs.override_github_environment == '' && inputs.environment || inputs.override_github_environment}}-ci
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}-${{ inputs.base_path }}-ci
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      # Set the directory where the Terraform files are located
      # The directory the value is then available in ${{ steps.directory.outputs.dir }}
      - name: Set directory
        id: directory
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          BASE_PATH: ${{ inputs.base_path }}
        run: |
          set -euo pipefail

          if [ -z "$ENVIRONMENT" ]; then
            echo "Environment must be provided."
            exit 1
          else
            # The directory is expected to be in the format
            #  infra/resources/${{ inputs.environment }}
            # Example: infra/resources/prod
            printf "dir=%q/%q" "$BASE_PATH" "$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - name: Set Environment Variables
        if: ${{ inputs.env_vars }}
        env:
          ENV_VARS: ${{ inputs.env_vars }}
        run: |
          set -euo pipefail

          for i in "$ENV_VARS[@]"
          do
            printf "%q\n" "$i" >> "$GITHUB_ENV"
          done

      - name: Azure Login
        uses: pagopa/dx/.github/actions/azure-login@main

      - name: Terraform Setup
        id: set-terraform-version
        uses: pagopa/dx/.github/actions/terraform-setup@main

      - name: Terraform Init
        working-directory: ${{ steps.directory.outputs.dir }}
        run: |
          terraform init

      # Run Terraform Plan
      # The plan output is saved in a file and then processed to remove unnecessary lines
      # The step never fails but the result is checked in the next step
      # This is because we want to post the plan output in the PR even if the plan fails
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        name: Terraform Plan
        id: plan
        with:
          script: |
            const { spawn } = require('child_process');
            const { createWriteStream } = require('fs');
            const { Transform } = require('stream');

            // --- Configurazione ---
            const logFile = 'plan_output.txt';
            const terraformArgs = ['plan', '-lock-timeout=3000s', '-no-color'];
            const filterString = 'hidden-link:';

            // --- Creazione dello stream di scrittura per il file di log ---
            const logStream = createWriteStream(logFile);

            // --- Avvio del processo 'terraform' ---
            const terraform = spawn('terraform', terraformArgs, {
              // Esegui il comando nella directory di lavoro originale
              cwd: process.env.INIT_CWD,
            });

            // --- Creazione di uno stream di trasformazione per il filtraggio ---
            // Questo stream riceverÃ  i dati, li filtrerÃ  e li passerÃ  oltre.
            const lineFilter = new Transform({
              transform(chunk, encoding, callback) {
                // Converte il chunk di dati in una stringa e la divide per righe.
                // Il `carry` gestisce le righe incomplete tra un chunk e l'altro.
                const lines = (this.carry || '' + chunk.toString()).split(/\r?\n/);
                this.carry = lines.pop(); // L'ultima riga potrebbe essere incompleta, la teniamo da parte

                for (const line of lines) {
                  if (!line.includes(filterString)) {
                    // Se la riga non contiene la stringa da filtrare, la inoltriamo
                    // aggiungendo un a capo per mantenere la formattazione.
                    this.push(line + '\n');
                  }
                }
                callback();
              },
              // La funzione flush viene chiamata alla fine dello stream
              // per processare eventuali dati rimasti nel buffer (l'ultima riga).
              flush(callback) {
                if (this.carry) {
                    if (!this.carry.includes(filterString)) {
                        this.push(this.carry);
                    }
                }
                callback();
              }
            });

            // --- Gestione dello streaming ---

            // 1. Collega (pipe) lo stdout di terraform allo stream di filtraggio
            terraform.stdout.pipe(lineFilter);

            // 2. Stampa l'output filtrato sulla console principale (process.stdout)
            lineFilter.pipe(process.stdout);
            //    ...e contemporaneamente scrivilo nel file di log
            lineFilter.pipe(logStream);

            // 3. Stampa lo stderr di terraform direttamente (gli errori non vengono filtrati)
            terraform.stderr.pipe(process.stderr);
            //    ...e contemporaneamente scrivilo nel file di log
            terraform.stderr.pipe(logStream);

            // --- Gestione degli errori e della chiusura dei processi ---

            terraform.on('error', (err) => {
              console.error(`Errore nell'avvio di 'terraform': ${err.message}`);
              logStream.write(`Errore nell'avvio di 'terraform': ${err.message}\n`);
            });

            lineFilter.on('error', (err) => {
              console.error(`Errore durante il filtraggio dello stream: ${err.message}`);
              logStream.write(`Errore durante il filtraggio dello stream: ${err.message}\n`);
            });

            terraform.on('close', (code) => {
              if (code !== 0) {
                const message = `Il processo 'terraform' Ã¨ terminato con codice ${code}`;
                console.log(message);
                logStream.write(message + '\n');
              }
              // Chiudi lo stream del file quando terraform ha finito
              logStream.end();
            });

            // terraform plan -lock-timeout=3000s -no-color 2>&1 | grep -v "hidden-link:"  --line-buffered > $PIPE_PATH

            // OUTPUT=$(grep -Ev "Refreshing state|state lock|Reading|Read" plan_output.txt | tail -c 60000)

            // printf "%s" "$OUTPUT" > plan_output_multiline.txt

            // if grep -q "::error::Terraform exited with code" plan_output.txt; then
            // echo "failed"
            // exit 1
            // fi

      # Post the plan output in the PR
      # The plan output is posted in a comment in the PR
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        name: Post Plan on PR
        id: comment
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('${{ steps.directory.outputs.dir }}/plan_output_multiline.txt', 'utf8');
            const status = '${{ steps.plan.outcome }}'
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(`Terraform Plan ('${{ steps.directory.outputs.dir }}')`)
            })
            const commentBody = `#### ðŸ“– Terraform Plan ('${{ steps.directory.outputs.dir }}') - ${status}
            <details>
            <summary>Terraform Plan</summary>

            \`\`\`hcl
            ${output}
            \`\`\`

            </details>
            `;
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              })
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
              issue_number: context.issue.number
            })


      # Fail the workflow if the Terraform plan failed
      - name: Check Terraform Plan Result
        if: always() && steps.plan.outcome != 'success'
        run: |
          exit 1