name: "AWS Bedrock AI Runner"
description: "Execute prompts using AWS Bedrock and return the results"
author: "PagoPA DX Team"

inputs:
  prompt:
    description: "The prompt to send to AWS Bedrock"
    required: true
  model:
    description: "The Bedrock model ID (e.g., anthropic.claude-3-5-sonnet-20240620-v1:0, anthropic.claude-3-haiku-20240307-v1:0)"
    required: false
    default: "Qwen3-Coder-30B-A3B-Instruct"
  aws-region:
    description: "AWS region for Bedrock"
    required: false
    default: "eu-central-1"
  max-tokens:
    description: "Maximum tokens in the response"
    required: false
    default: "4096"
  temperature:
    description: "Temperature for response generation (0.0-1.0)"
    required: false
    default: "1.0"

outputs:
  result:
    description: "The response from AWS Bedrock"
    value: ${{ steps.run-bedrock.outputs.result }}
  success:
    description: "Whether the command executed successfully (true/false)"
    value: ${{ steps.run-bedrock.outputs.success }}

runs:
  using: "composite"
  steps:
    - name: Cloud Login
      uses: pagopa/dx/actions/csp-login@main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install AWS SDK
      shell: bash
      run: |
        npm install -g @aws-sdk/client-bedrock-runtime

    - name: Call AWS Bedrock
      id: run-bedrock
      uses: actions/github-script@v7
      env:
        PROMPT: ${{ inputs.prompt }}
        MODEL: ${{ inputs.model }}
        AWS_REGION: ${{ inputs.aws-region }}
        MAX_TOKENS: ${{ inputs.max-tokens }}
        TEMPERATURE: ${{ inputs.temperature }}
      with:
        script: |
          const { BedrockRuntimeClient, InvokeModelCommand } = require('@aws-sdk/client-bedrock-runtime');

          const prompt = process.env.PROMPT;
          const modelId = process.env.MODEL;
          const region = process.env.AWS_REGION;
          const maxTokens = parseInt(process.env.MAX_TOKENS);
          const temperature = parseFloat(process.env.TEMPERATURE);

          try {
            core.info(`Calling AWS Bedrock with model: ${modelId} in region: ${region}`);

            const client = new BedrockRuntimeClient({ region });

            // Prepare the request based on model type
            let requestBody;

            if (modelId.startsWith('anthropic.claude')) {
              // Claude models format
              requestBody = {
                anthropic_version: "bedrock-2023-05-31",
                max_tokens: maxTokens,
                temperature: temperature,
                messages: [
                  {
                    role: "user",
                    content: prompt
                  }
                ]
              };
            } else if (modelId.startsWith('amazon.titan')) {
              // Titan models format
              requestBody = {
                inputText: prompt,
                textGenerationConfig: {
                  maxTokenCount: maxTokens,
                  temperature: temperature
                }
              };
            } else {
              throw new Error(`Unsupported model: ${modelId}`);
            }

            const command = new InvokeModelCommand({
              modelId: modelId,
              contentType: "application/json",
              accept: "application/json",
              body: JSON.stringify(requestBody)
            });

            const response = await client.send(command);
            const responseBody = JSON.parse(new TextDecoder().decode(response.body));

            let result;
            if (modelId.startsWith('anthropic.claude')) {
              result = responseBody.content[0].text;
            } else if (modelId.startsWith('amazon.titan')) {
              result = responseBody.results[0].outputText;
            }

            core.setOutput('success', 'true');
            core.setOutput('result', result);
            core.info('AWS Bedrock call successful');

          } catch (error) {
            core.error(`AWS Bedrock failed: ${error.message}`);
            core.setOutput('success', 'false');
            core.setOutput('result', error.message);
          }

branding:
  icon: "cpu"
  color: "orange"
